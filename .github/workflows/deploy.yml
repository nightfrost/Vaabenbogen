name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Application
        run: dotnet build --configuration Release --no-restore

      - name: Publish Application
        run: dotnet publish -c Release -o publish
      

      - name: Upload Artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: published-app
          path: publish/
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: published-app
          path: publish/
  
      - name: Install sshpass
        run: sudo apt-get install -y sshpass
  
      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVICE_NAME: "vaabenbogen.service"
        run: |
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > private_key && chmod 600 private_key
          eval `ssh-agent -s`
          echo "$SSH_PASSWORD" | ssh-add private_key
          
          # Test connection with timeout
          timeout 10s sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "echo SSH connection successful!"
          
          echo "Starting file transfer..."
          sshpass -p "$SSH_PASSWORD" scp -v -o StrictHostKeyChecking=no -r publish/* $SERVER_USER@$SERVER_IP:/var/www/vaabenbogen/VaabenbogenConsumer_1_0/
          echo "File transfer completed"
          
          echo "Executing service commands..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
          set -x
          if sudo -s systemctl restart $SERVICE_NAME; then
              echo "Service restart successful"
          else
              echo "Service restart failed"
              exit 1
          fi
  
          if sudo -s systemctl status $SERVICE_NAME --no-pager; then
              echo "Service status check successful"
          else
              echo "Service status check failed"
              exit 1
          fi
          EOF
  


